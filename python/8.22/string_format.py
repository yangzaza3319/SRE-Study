# %s 用法示例
print("姓名: %s" % "Alice")  # 输出: 姓名: Alice

# %r 用法示例
print("姓名: %r" % "Alice")  # 输出: 姓名: 'Alice'

# %c 用法示例1
print("Unicode 65 码点对应的字符为 %c" % 65)  # 输出: Unicode 65 码点对应的字符为 A

# %c 用法示例2
print("Unicode 128512码点对应的字符为 %c" % 128512)  # 输出: Unicode 128512码点对应的字符为 😄

# %c 用法示例3
print("字符X对应的字符为 %c" % 'X')  # 输出: 字符串X对应的字符为 X

# %o 用法示例
print("数字10的八进制表示为 %o" % 10)  # 输出: 数字10的八进制表示为 12

# %X 用法示例
print("数字89的十六进制表示为 %X" % 89)  # 输出: 数字89的十六进制表示为 59

# %d 用法示例1
print("浮点数99.2的十进制表示为 %d" % 99.2)  # 输出: 浮点数99.2的十进制表示为 99

# %d 用法示例2
print("整数-99的十进制表示为 %d" % -99)  # 输出: 整数-99的十进制表示为 -99

# %e 用法示例
print("浮点数99.2的科学计数法表示为 %e" % 99.2)  # 输出: 浮点数99.2的科学计数法表示为 9.920000e+01

# %E 用法示例
print("浮点数99.2的科学计数法表示为 %E" % 99.2)  # 输出: 浮点数99.2的科学计数法表示为 9.920000E+01

# %f 用法示例
print("浮点数3.19的浮点表示为 %f" % 3.19)  # 输出: 浮点数3.19的浮点表示为 3.190000

# %F 用法示例
a = float('nan')  # 只有像'3.14'、'100'、'-5.5'、'inf'、'nan'这样的几个字符串才能被float()函数正确转换
print("大F输出大写:%f" %a) # 小f输出大写:nan
print("大F输出大写:%F" %a) # 大F输出大写:NAN

# %g 用法示例1 普通小数：自动去掉末尾的 0
x = 3.140000
print("%%g: %g" % x)      # 输出: 3.14
print("%%f: %f" % x)      # 对比 %f: 3.140000

# %g 用法示例2 整数形式的浮点数：自动省略小数点
y = 5.0
print("%%g: %g" % y)      # 输出: 5

# %g 用法示例3小数部分很短
z = 0.000123
print("%%g: %g" % z)      # 输出: 0.000123

# %g 用法示例4非常小的数：自动切换为科学计数法
small = 0.000000123
print("%%g: %g" % small)  # 输出: 1.23e-07

# %g 用法示例 5 非常大的数
large = 123456789.0
print("%%g: %g" % large)  # 输出: 1.23457e+08

# %g 用法示例 6 使用 %G（大写 E）
print("%%G: %G" % large)  # 输出: 1.23457E+08

# %g 用法示例 7  控制有效数字位数（例如保留 3 位有效数字）
print("保留3位有效数字: %.3g" % large)   # 输出: 1.23e+08
print("保留3位有效数字: %.3g" % z)      # 输出: 0.000123 → 但有效数字是3位
print("保留2位有效数字: %.2g" % 0.000123) # 输出: 0.00012


# %% 用法示例
print("百分号%%的用法示例")  # 输出: 百分号% 的用法示例